#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define ZMK_POINTING_DEFAULT_SCRL_VAL 100
#define MOUSE 4
#define SCROLL 5
#define NUM 6

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        muhennkann {
            bindings = <&to_layer_0 INT_MUHENKAN>;
            key-positions = <11 10>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };

        BT0 {
            bindings = <&bt BT_SEL 0>;
            key-positions = <22 28>;
        };

        BT1 {
            bindings = <&bt BT_SEL 1>;
            key-positions = <23 28>;
        };

        BT2 {
            bindings = <&bt BT_SEL 2>;
            key-positions = <24 28>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };

        kakko1: kakko1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACKET &kp RIGHT_BRACKET &kp LEFT_ARROW>;
            label = "KAKKO1";
        };
    };

    behaviors {
        scroll_up_down: behavior_sensor_rotate_mouse_wheel_up_down {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

            // 追加: スクロールのタップ時間を設定 (20ms)

            tap-ms = <20>;
        };

        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&lt 5 Q    &kp W           &kp E             &kp R             &kp T                                                             &kp Y        &kp U        &lt 5 I            &kp O            &lt 5 P
&kp A      &mt LEFT_ALT S  &mt LEFT_SHIFT D  &mt LCTRL F       &kp G        &kp ESCAPE                  &kp MINUS                &kp H        &mt RCTRL J  &mt RIGHT_SHIFT K  &mt RIGHT_ALT L  &kp BACKSPACE
&kp Z      &kp X           &kp C             &kp V             &kp B        &kp LC(LG(LEFT_ARROW))      &kp RG(RC(RIGHT_ARROW))  &kp N        &kp M        &kp COMMA          &kp DOT          &kp SLASH
&kp LCTRL  &kp LEFT_WIN    &kp LEFT_ALT      &lt 1 LEFT_SHIFT  &lt 2 SPACE  &lt 5 TAB                   &lt 6 BACKSPACE          &lt 1 ENTER                                                   &mkp MB1
            >;

            sensor-bindings = <&scroll_up_down>;
        };

        NUMARROW {
            bindings = <
&kp LA(TAB)  &kp N7        &kp N8        &kp N9              &kp LEFT_BRACKET                                 &kp RC(W)         &kp RC(TAB)     &kp UP_ARROW    &kp RC(RS(TAB))  &kp RA(F4)
&kp N0       &kp NUMBER_4  &kp N5        &kp NUMBER_6        &kp EQUAL          &trans      &kp F13           &kp MINUS         &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp EQUAL
&kp TILDE    &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3        &kp RIGHT_BRACKET  &trans      &trans            &mkp MB4          &mkp LCLK       &mkp MB2        &mkp MB5         &kp RS(DEL)
&trans       &kp CARET     &kp HASH      &kp LG(LEFT_ARROW)  &kp LANG_HANJA     &trans      &kp LANG_HANGEUL  &kp LG(UP_ARROW)                                                   &mkp MB2
            >;
        };

        NUM {
            bindings = <
&kp EXCLAMATION  &kp LC(NUMBER_1)  &kp LC(NUMBER_2)  &kakko1                 &kp MINUS                                                  &kp CARET                &kp AMPERSAND      &kp TILDE       &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS
&kp ASTERISK     &kp F2            &kp F4            &kp LS(F10)             &kp EQUAL             &kp LC(LA(KP_NUMBER_0))      &trans  &kp EXCLAMATION          &kp AT_SIGN        &kp HASH        &kp DOLLAR            &kp PERCENT
&kp SLASH        &kp LC(Z)         &kp LC(Y)         &kp LC(LS(DOWN_ARROW))  &kp LC(LS(UP_ARROW))  &kp EQUAL                    &trans  &kp LEFT_BRACKET         &kp RIGHT_BRACKET  &kp LEFT_BRACE  &kp RIGHT_BRACE       &kp BACKSLASH
&kp ESCAPE       &kp N0            &kp PERIOD        &kp LC(LG(LEFT_ARROW))  &kp LG(LC(TAB))       &kp BSPC                     &trans  &kp RG(RC(RIGHT_ARROW))                                                           &kp PIPE
            >;
        };

        ARROW {
            bindings = <
&kp ESCAPE      &kp LC(LS(TAB))         &kp UP_ARROW    &kp LC(TAB)              &trans                       &kp LG(LEFT_ARROW)  &kp RC(RS(TAB))         &kp UP_ARROW    &kp RC(TAB)              &kp LG(RIGHT_ARROW)
&kp HOME        &kp LEFT_ARROW          &kp DOWN_ARROW  &kp RIGHT_ARROW          &kp END  &trans      &trans  &kp HOME            &kp LEFT_ARROW          &kp DOWN_ARROW  &kp RIGHT_ARROW          &kp END
&kp LEFT_SHIFT  &kp LG(LS(LEFT_ARROW))  &trans          &kp LG(LS(RIGHT_ARROW))  &trans   &trans      &trans  &trans              &kp LG(LC(LEFT_ARROW))  &trans          &kp LG(RC(RIGHT_ARROW))  &trans
&trans          &trans                  &trans          &trans                   &trans   &trans      &trans  &trans                                                                               &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        MOUSE {
            bindings = <
&to_layer_0 Q  &to_layer_0 W  &to_layer_0 E  &to_layer_0 R  &to_layer_0 T                                     &to_layer_0 Y    &to_layer_0 U  &kp RC(T)  &to_layer_0 O  &mo 5
&to_layer_0 A  &to_layer_0 S  &to_layer_0 D  &to_layer_0 F  &to_layer_0 G      &trans      &kp RC(V)          &kp RC(RS(TAB))  &mkp MB1       &mkp MB3   &mkp MB2       &kp RC(TAB)
&to_layer_0 Z  &to_layer_0 X  &to_layer_0 C  &to_layer_0 V  &to_layer_0 B      &trans      &kp RC(C)          &to_layer_0 N    &mkp MB4       &kp RC(W)  &mkp MB5       &trans
&trans         &trans         &trans         &trans         &to_layer_0 LANG2  &trans      &to_layer_0 LANG1  &trans                                                    &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        layer_6 {
            bindings = <
&trans  &trans        &trans        &trans        &trans                           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans        &trans        &trans        &trans        &trans
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans      &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };
    };
};
